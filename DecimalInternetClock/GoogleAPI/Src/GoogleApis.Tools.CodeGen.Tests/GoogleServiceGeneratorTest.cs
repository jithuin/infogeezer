/*
Copyright 2010 Google Inc

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using System;
using Google.Apis.Discovery;
using NUnit.Framework;

namespace Google.Apis.Tools.CodeGen.Tests
{
    /// <summary>
    /// Tests for the GoogleServiceGenerator class
    /// </summary>
    [TestFixture]
    public class GoogleServiceGeneratorTest : BaseCodeGeneratorTest
    {
        /// <summary>
        /// Tests if the service generator can generate the adsense service
        /// </summary>
        [Test]
        public void TestCompilationWithDefaultDecorators_AdSense()
        {
            var clientNamespace = "Google.Apis.Samples.CommandLineGeneratedService.AdSense";

            var service = CreateAdSenseV1_0Service();

            var generator = new GoogleServiceGenerator(service, clientNamespace);
            var codeCompileUnit = generator.GenerateCode();

            // Full Compile we should not have any warnings.
            CheckCompile(
                codeCompileUnit, true,
                "Failed To compile resultant code with default decorators. " + " Discovery V0.2, AdSense ");
        }

        /// <summary>
        /// Tests if the code generated by CodeGen Compiles, fails if it does not.
        /// </summary>
        [Test]
        public void TestCompilationWithDefaultDecorators_Buzz()
        {
            var clientNamespace = "Google.Apis.Samples.CommandLineGeneratedService.Buzz";

            var service = CreateBuzzService();

            var generator = new GoogleServiceGenerator(service, clientNamespace);
            var codeCompileUnit = generator.GenerateCode();

            // Full Compile we should not have any warnings.
            CheckCompile(codeCompileUnit, true, "Failed To compile resultant code with default decorators.");
        }

        /// <summary>
        /// System test -- Size: Medium
        /// Tests the full CodeGen build procedure for the discovery v1 service
        /// </summary>
        [Test]
        public void SystemTestCompilationWithDefaultDecorators_Discovery()
        {
            const string serviceName = "discovery";
            const string serviceVersion = "v1";
            var clientNamespace = "Google.Apis.Samples.CommandLineGeneratedService.Discovery";

            // Generate the discovery URL for that service
            string url = string.Format(GoogleServiceGenerator.GoogleDiscoveryURL, serviceName, serviceVersion);
            var discovery = new DiscoveryService(new WebDiscoveryDevice(new Uri(url)));

            // Build the service based on discovery information.
            var service = discovery.GetService(DiscoveryVersion.Version_1_0);
            Assert.AreEqual(serviceName, service.Name);
            Assert.AreEqual(serviceVersion, service.Version);

            // Generate code
            var generator = new GoogleServiceGenerator(service, clientNamespace);
            var codeCompileUnit = generator.GenerateCode();

            // Full Compile we should not have any warnings.
            CheckCompile(codeCompileUnit, true, "Failed To compile resultant code with default decorators.");
        }
    }
}
